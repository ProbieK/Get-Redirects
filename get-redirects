#!/bin/bash

LOOP_NUMBER='100'
OUTPUT_LOCATION=''
USERAGENT_1="Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36" # Chrome 41.0.2228.0
USERAGENT_2="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36" # Chrome 41.0.2227.1
USERAGENT_3="Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1" # Firefox 40.1
USERAGENT_4="Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.0" # Firefox 36.0
USERAGENT_5="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A" # Safari 7.0.3
USERAGENT_6="Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5355d Safari/8536.25" # Safari 6.0
USERAGENT_7="Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko" # Internet Explorer 11.0
USERAGENT_8="Mozilla/5.0 (compatible, MSIE 11, Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko" # Internet Explorer 11.0
USERAGENT_9="Mozilla/5.0 (compatible; MSIE 10.6; Windows NT 6.1; Trident/5.0; InfoPath.2; SLCC1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 2.0.50727) 3gpp-gba UNTRUSTED/1.0" # Internet Explorer 10.6
USERAGENT_10="Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 7.0; InfoPath.3; .NET CLR 3.1.40767; Trident/6.0; en-IN)" # Internet Explorer 10.0

function usage {
  echo "Flags:"
  echo "-n =  Number of loops to make through the script"
  echo "      Because the script uses 2 different methods of finding redirects per loop"
  echo "      the actual number of requests made to the URL will be double the amount of loops"
  echo ""
  echo "-u =  (required) Specify the URL you want to check"
  echo ""
  echo "-o =  Saves output to file in an OpenDNS compatible Newline Delineated format"
  echo ""
  echo "-s =  Silence the default output to the terminal"
  echo "      (if specified, use the -o flag to specify where to save the output)"
  echo ""
  echo "Minimum Usage:"
  echo "./get-redirects -u [URL]"
  echo ""
  echo "Other Examples:"
  echo "./get-redirects -n 500 -u [URL]"
  echo "./get-redirects -u google.com -o ./output.txt"
  echo "./get-redirects -u http://www.google.com/ -o ./output.txt -s"
  exit
}

while getopts 'n:u:o:sh' flag; do
  case "${flag}" in
    n) LOOP_NUMBER=${OPTARG} ;;
    u) URL=${OPTARG} ;;
    o) OUTPUT_LOCATION=${OPTARG} ;;
    s) SILENT='true' ;;
    h) usage ;;
    *) echo "error \"Unexpected option ${flag}\""
        exit ;;
  esac
done

if [ -z "$URL" ]
then
  echo "Use ./get-redirects -h for usage details"
  exit
fi

echo "Looping "$LOOP_NUMBER" Times"

var1=$(for ((n=0;n<$LOOP_NUMBER;n++))
do
    NUMBER=$[ ( $RANDOM % 10 )  + 1 ]
    USERAGENT=USERAGENT_${NUMBER}
    URL1=$(curl -m 100 -A "${!USERAGENT}" -sw "\n\n%{redirect_url}" "${URL}" | tail -n 1)
    URL2=$(curl -m 100 -A "${!USERAGENT}" -Ls -w %{url_effective} -o /dev/null "${URL}")
    echo "$URL1"
    echo "$URL2"
done)

var2=$(for line in $var1; do
  python3 ./get-domain.py $line
done)

var3=$(echo "$var2"|tr " " "\n"|sort -u)

#Output Selections
for line in $var3; do
  if [ ! -z "$OUTPUT_LOCATION" ]
    then
      echo "$line" >> "$OUTPUT_LOCATION"
  fi
  if [ "$SILENT" != "true" ]
    then
      echo "$line"
  fi
done
